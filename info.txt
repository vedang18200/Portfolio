# Portfolio Website Setup Guide

## 🚀 Quick Start Instructions

# 1. Create Django Project Structure
django-admin startproject portfolio
cd portfolio
python manage.py startapp main

# 2. Create required directories
mkdir -p templates/main
mkdir -p static/{css,js,images}
mkdir -p media/{projects,resume,profile}
mkdir -p main/management/commands

# 3. Install Dependencies
pip install -r requirements.txt

# 4. Create .env file (copy the template provided)
# Update with your actual credentials

# 5. Run setup script
python setup_portfolio.py

# 6. Start development server
python manage.py runserver

## 📁 Project Structure
"""
portfolio/
├── portfolio/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── main/
│   ├── migrations/
│   ├── management/
│   │   └── commands/
│   │       ├── __init__.py
│   │       ├── populate_data.py
│   │       └── create_superuser_auto.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   ├── forms.py
│   └── urls.py
├── templates/
│   └── main/
│       ├── base.html
│       ├── home.html
│       ├── about.html
│       ├── projects.html
│       ├── project_detail.html
│       └── contact.html
├── static/
│   ├── css/
│   ├── js/
│   └── images/
├── media/
│   ├── projects/
│   ├── resume/
│   └── profile/
├── requirements.txt
├── .env
├── setup_portfolio.py
└── manage.py
"""

## 🔧 Additional Template Files

# templates/main/about.html
cat > templates/main/about.html << 'EOF'

EOF

# templates/main/project_detail.html
cat > templates/main/project_detail.html << 'EOF'

EOF

## 🌐 Production Deployment Guide

# For Heroku Deployment
cat > Procfile << EOF
web: gunicorn portfolio.wsgi --log-file -
EOF

cat > runtime.txt << EOF
python-3.9.6
EOF

# Add to requirements.txt for production
echo "
gunicorn==20.1.0
whitenoise==6.2.0
psycopg2-binary==2.9.5
dj-database-url==1.0.0
" >> requirements.txt

# Production settings (add to settings.py)
cat >> portfolio/settings.py << 'EOF'

# Production Settings
import dj_database_url

# Heroku Settings
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }

    # Static files for production
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

    # Security settings for production
    SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
EOF

# Database initialization script
cat > init_db.py << 'EOF'
#!/usr/bin/env python
import os
import sys
import django

# Add the project directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from django.core.management import execute_from_command_line

if __name__ == '__main__':
    print("🔄 Initializing database...")

    commands = [
        ['makemigrations'],
        ['migrate'],
        ['create_superuser_auto'],
        ['populate_data'],
    ]

    for cmd in commands:
        try:
            execute_from_command_line(['manage.py'] + cmd)
            print(f"✅ {' '.join(cmd)} completed")
        except Exception as e:
            print(f"❌ Error in {' '.join(cmd)}: {e}")

    print("🎉 Database initialization complete!")
EOF

## 📝 Environment Variables Setup

# Create .env.example for reference
cat > .env.example << 'EOF'
# Django Settings
DEBUG=True
SECRET_KEY=your-very-secret-key-here-change-in-production

# Email Configuration (for contact form)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-gmail-app-password

# Database (leave empty for SQLite in development)
DATABASE_URL=

# Optional: Social Media Links
LINKEDIN_URL=https://linkedin.com/in/your-profile
TWITTER_URL=https://twitter.com/your-handle
EOF

## 🔧 Additional Management Commands

# main/management/commands/backup_data.py
mkdir -p main/management/commands
cat > main/management/commands/backup_data.py << 'EOF'

EOF

# main/management/commands/update_skills.py
cat > main/management/commands/update_skills.py << 'EOF'

EOF

## 📚 API Endpoints Documentation

# Create API documentation
cat > API_DOCUMENTATION.md << 'EOF'
# Portfolio API Endpoints

## Skills API
**GET** `/api/skills/`
Returns all skills data in JSON format.

```json
{
  "skills": [
    {
      "name": "Python",
      "proficiency": 85,
      "category": "programming",
      "icon": "fab fa-python"
    }
  ]
}
```

## Project Search API
**GET** `/api/search-projects/?q=searchterm`
Returns search results for projects.

```json
{
  "results": [
    {
      "title": "Project Title",
      "url": "/projects/uuid/",
      "description": "Short description",
      "image": "/media/projects/image.jpg"
    }
  ]
}
```

## Usage Examples

### JavaScript Fetch
```javascript
// Get all skills
fetch('/api/skills/')
  .then(response => response.json())
  .then(data => console.log(data.skills));

// Search projects
fetch('/api/search-projects/?q=python')
  .then(response => response.json())
  .then(data => console.log(data.results));
```

### Python Requests
```python
import requests

# Get skills data
response = requests.get('http://localhost:8000/api/skills/')
skills = response.json()['skills']

# Search projects
response = requests.get('http://localhost:8000/api/search-projects/',
                       params={'q': 'machine learning'})
results = response.json()['results']
```
EOF

## 🚀 Deployment Instructions

echo "
## 🚀 Complete Setup Instructions

### 1. Local Development Setup
\`\`\`bash
# Clone or create the project
mkdir vedang_portfolio && cd vedang_portfolio

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt

# Set up environment variables
cp .env.example .env
# Edit .env with your actual values

# Initialize database and populate data
python init_db.py

# Run development server
python manage.py runserver
\`\`\`

### 2. Admin Panel Setup
1. Visit http://127.0.0.1:8000/admin
2. Login with admin/admin123
3. Upload your resume in Resume section
4. Add/update your profile information
5. Add more projects and skills

### 3. Customization
- Update profile information in admin panel
- Upload your actual resume file
- Add your profile picture
- Update social media links
- Customize colors in CSS variables

### 4. Email Configuration
1. Enable 2-factor authentication on Gmail
2. Generate App Password
3. Update EMAIL_HOST_USER and EMAIL_HOST_PASSWORD in .env

### 5. Production Deployment (Heroku)
\`\`\`bash
# Install Heroku CLI and login
heroku create your-portfolio-name
heroku config:set SECRET_KEY='your-secret-key'
heroku config:set DEBUG=False
heroku config:set EMAIL_HOST_USER='your-email@gmail.com'
heroku config:set EMAIL_HOST_PASSWORD='your-app-password'

# Deploy
git push heroku main
heroku run python manage.py migrate
heroku run python manage.py populate_data
\`\`\`

### 6. Features Included
✅ Responsive dark theme design
✅ Animated loading screens
✅ Project portfolio with filtering
✅ Skills showcase with progress bars
✅ Working contact form with email notifications
✅ Resume download functionality
✅ Admin panel for content management
✅ SEO optimized
✅ Mobile-friendly navigation
✅ Social media integration
✅ Real-time search functionality

### 7. File Structure Summary
- **Models**: Project, Skill, Profile, Resume, ContactMessage
- **Views**: Home, About, Projects, Contact, Resume Download
- **Templates**: Responsive HTML with dark theme
- **Admin**: Full backend management
- **Management Commands**: Data population and backup
- **API Endpoints**: Skills and project search

### 8. Maintenance Commands
\`\`\`bash
# Backup data
python manage.py backup_data

# Update skills
python manage.py update_skills --skill 'React' --proficiency 80

# Create superuser
python manage.py createsuperuser
\`\`\`

Your portfolio is now ready! 🎉
Visit the admin panel to customize content and upload your resume.
"
